#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_FRAMES 3
#define MAX_PAGES 10  

// Optimal Page Replacement
void optimal(int incomingStream[], int pages, int frames) {
    int frame[MAX_FRAMES], pageFaults = 0;

    for (int i = 0; i < frames; i++) {
        frame[i] = -1; 
    }

    printf("\nOptimal Page Replacement:\n");
    printf("Incoming\tFrame 1\tFrame 2\tFrame 3\n");

    for (int m = 0; m < pages; m++) {
        int s = 0; 
        for (int n = 0; n < frames; n++) {
            if (frame[n] == incomingStream[m]) {
                s = 1; 
                break;
            }
        }

        if (s == 0) { 
            int pos = -1; 
            for (int n = 0; n < frames; n++) {
                if (frame[n] == -1) {
                    pos = n; 
                    break;
                }
            }

            if (pos == -1) {
                int farthest = m; 
                for (int n = 0; n < frames; n++) {
                    int j;
                    for (j = m + 1; j < pages; j++) {
                        if (frame[n] == incomingStream[j]) {
                            if (j > farthest) {
                                farthest = j; 
                                pos = n; 
                            }
                            break;
                        }
                    }
                    if (j == pages) {
                        pos = n; 
                        break;
                    }
                }
            }
            frame[pos] = incomingStream[m]; 
            pageFaults++; 
        }

        printf("%d\t\t", incomingStream[m]);
        for (int n = 0; n < frames; n++) {
            if (frame[n] != -1)
                printf("%d\t\t", frame[n]);
            else
                printf("-\t\t");
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int pages = MAX_PAGES, frames;

    int* incomingStream = (int*)malloc(MAX_PAGES * sizeof(int));

    printf("Enter the page references (space-separated, max %d): ", MAX_PAGES);
    char input[256];
    fgets(input, sizeof(input), stdin); 

    char* token = strtok(input, " ");
    int count = 0;

    while (token != NULL && count < MAX_PAGES) {
        incomingStream[count++] = atoi(token);
        token = strtok(NULL, " ");
    }

    int pagesEntered = count;

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    optimal(incomingStream, pagesEntered, frames);

    free(incomingStream);

    return 0;
}
